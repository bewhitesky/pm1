<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd">  
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <context:component-scan base-package="com.cszx.pm.controller" />
    <context:component-scan base-package="com.cszx.common.aspect" />
    <context:component-scan base-package="com.cszx.common.component" />    
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean> 
    <!-- 定义跳转的文件的前后缀 ，视图模式配置
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 
        <property name="prefix" value="/jsp/" />  
        <property name="suffix" value=".jsp" />  
    </bean>   -->  
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>
    <!-- 解决post请求问题 -->
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">  
     <property name="urlMap">  
         <map>  
              <entry key="/**" value="myResourceHandler" />  
         </map>  
     </property>  
     <property name="order" value="100000" />         
	</bean> 
	<bean id="myResourceHandler" name="myResourceHandler"  
      class="org.springframework.web.servlet.resource.ResourceHttpRequestHandler">  
      <property name="locations" value="/" />  
      <property name="supportedMethods">  
         <list>  
            <value>GET</value>  
            <value>POST</value>  
         </list>  
     </property>    
	</bean>
	<!-- 启用Spring Shiro注解  -->
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <aop:config>  
	<!--定义切面-->  
	    <aop:aspect id="logAspect" ref="logAspect">  
	    <!-- 定义切入点 (配置在com.cszx.pm.controller下所有的类在调用之前都会被拦截)-->  
	    <aop:pointcut expression="execution(* com.cszx.pm.controller.*.*(..))" id="logPointCut"/>  
	    <!--方法执行之前被调用执行的-->  
	    <aop:before method="before" pointcut-ref="logPointCut"/><!--一个切入点的引用-->  
	    <aop:after method="after" pointcut-ref="logPointCut"/><!--一个切入点的引用-->  
	    </aop:aspect>  
	</aop:config>
	
	<aop:config>  
	<!--定义切面-->  
	    <aop:aspect id="validatorAspect" ref="validatorAspect">  
	    <!-- 定义切入点 (配置在com.cszx.pm.controller下所有的类在调用之前都会被拦截)-->  
	    <aop:pointcut expression="execution(* com.cszx.pm.controller.*.*(..))" id="validPointCut"/>  
	    <!--方法执行之前被调用执行的-->
	    <aop:around method="aroundMethod" pointcut-ref="validPointCut"/><!--一个切入点的引用-->  
	    </aop:aspect>  
	</aop:config>
	<!--统一异常处理 --> 
	<bean id="exceptionResolver" class="com.cszx.common.exception.MySimpleMappingExceptionResolver"></bean>  
	<mvc:annotation-driven  validator="validator"/> 
	
	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->  
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">  
	    <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>  
	    <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
	    <property name="validationMessageSource" ref="messageSource"/>  
	</bean>  
	  
	<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->  
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
	    <property name="basenames">  
	        <list>  
	            <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->  
	            <value>classpath:messages</value>
	            <value>classpath:org/hibernate/validator/ValidationMessages</value>   
	        </list>  
	    </property>  
	        
	    <property name="useCodeAsDefaultMessage" value="false"/> 
	    <!-- 资源文件编码格式 --> 
    	<property name="defaultEncoding" value="UTF-8"/> 
    	<!-- 对资源文件内容缓存时间，单位秒 --> 
    	<property name="cacheSeconds" value="60"/> 
	</bean>    
	
	<!--解决静态资源访问 -->
	<mvc:resources location="/" mapping="/**"/>
	<mvc:resources location="/static/" mapping="/static/**"/>
	<mvc:resources location="/assets/" mapping="/assets/**"/>
  	<mvc:resources location="/jsp/" mapping="/jsp/**"/> 
  	<mvc:resources location="/WEB-INF/" mapping="/WEB-INF/**"/> 
</beans>  